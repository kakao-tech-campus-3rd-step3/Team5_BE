services:
  mysql:
    image: mysql:8.0
    container_name: dailyq-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      # MYSQL_USER/MYSQL_PASSWORD는 일반 계정용입니다. root를 쓰면 안 됩니다.
      TZ: Asia/Seoul
    command: [
      "mysqld",
      "--default-authentication-plugin=mysql_native_password",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--init-connect=SET NAMES utf8mb4",
      "--skip-character-set-client-handshake"
    ]
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./dailyq/src/main/resources/static/01_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
      - ./dailyq/src/main/resources/static/02_mock.sql:/docker-entrypoint-initdb.d/02_mock.sql:ro
    networks:
      - dailyq-network
    # MySQL 리소스 제한
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 90s

  app:
    image: dailyq-app:latest
    container_name: dailyq-app
    restart: unless-stopped
    ports:
      - "80:8080"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - KAKAO_API_KEY=${KAKAO_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TOKEN_EXPIRATION_MILLIS=${JWT_ACCESS_TOKEN_EXPIRATION_MILLIS}
      - JWT_REFRESH_TOKEN_EXPIRATION_MILLIS=${JWT_REFRESH_TOKEN_EXPIRATION_MILLIS}
      - DEV_API_PASSWORD=${DEV_API_PASSWORD}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - FRONTEND_URL=${FRONTEND_URL}
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - dailyq-network
    # CPU/메모리 리소스 제한으로 시스템 안정성 확보
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 6
      start_period: 150s

  prometheus:
    image: prom/prometheus:latest
    container_name: dailyq-prometheus
    restart: unless-stopped # 서버 자동 재부팅
    ports:
      - "9090:9090" # 외부 내부 일단 다 9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # 설정 파일 연결
      - ./prometheus_data:/prometheus   # 수집한 데이터를 저장할 공간 일단 Bind Mound
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - dailyq-network
    depends_on:
      - app #app service가 먼저 실행
  grafana:
    image: grafana/grafana:latest
    container_name: dailyq-grafana
    restart: unless-stopped
    ports:
      - "3000:3000" # 표준
    volumes:
      - ./grafana-data:/var/lib/grafana
    networks:
      - dailyq-network
    depends_on:
      - prometheus

volumes:
  mysql_data:

networks:
  dailyq-network:
    driver: bridge
