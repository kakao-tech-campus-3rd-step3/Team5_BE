plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.cloud.tools.jib' version '3.4.4'
}

group = 'com.knuissant'
version = '0.0.1-SNAPSHOT'
description = 'KNUissant '

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1'
    runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Jib 설정
jib {
    from {
        image = 'openjdk:21-jdk-slim'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
        }
    }
    
    to {
        image = 'dailyq-app'
        tags = ['latest', version]
    }
    
    container {
        ports = ['8080']
        
        // 비루트 사용자 설정
        user = '1001:1001'
        
        // JVM 옵션 최적화
        jvmFlags = [
            '-Xms512m',
            '-Xmx1024m',
            '-XX:+UseG1GC',
            '-XX:+UseContainerSupport',
            '-Djava.security.egd=file:/dev/./urandom'
        ]
        
        // 환경변수
        environment = [
            'SPRING_PROFILES_ACTIVE': 'prod'
        ]
        
        // Health check용 레이블
        labels = [
            'maintainer': 'dailyq-team',
            'version': version
        ]
        
        // 작업 디렉토리
        workingDirectory = '/app'
    }
    
    // Docker daemon을 사용하여 로컬에 빌드
    dockerBuild {
        // Docker daemon이 없으면 tarball로 빌드
        noCache = false
    }
}
