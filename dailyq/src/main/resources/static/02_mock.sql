/* -------------------------------------
   목업 데이터 (각 테이블 5개씩)
   ------------------------------------- */

/* USERS (5) */
INSERT INTO users (user_id, email, name, role, streak, solved_today)
VALUES (1, 'alice@example.com', 'Alice', 'FREE', 3, 0),
       (2, 'bob@example.com', 'Bob', 'PAID', 10, 1),
       (3, 'carol@example.com', 'Carol', 'FREE', 1, 0),
       (4, 'dave@example.com', 'Dave', 'PAID', 7, 1),
       (5, 'erin@example.com', 'Erin', 'ADMIN', 0, 0);

/* OCCUPATIONS 상위 카테고리 (5) */
INSERT INTO occupations (occupation_id, occupation_name)
VALUES (1, '개발'),
       (2, '데이터'),
       (3, '디자인'),
       (4, '마케팅'),
       (5, '운영');

/* JOBS 세부 직군 (5) */
INSERT INTO jobs (job_id, job_name, occupation_id)
VALUES (1, '백엔드 개발자', 1),
       (2, '프론트엔드 개발자', 1),
       (3, '데이터 사이언티스트', 2),
       (4, '프로덕트 디자이너', 3),
       (5, '그로스 마케터', 4),
       (6, '서비스 운영자', 5);

/* USER PREFERENCES (5) — 대표 직군 매칭 */
INSERT INTO user_preferences (user_id, daily_question_limit, question_mode, user_response_type,
                              time_limit_seconds, notify_time, allow_push, user_job)
VALUES (1, 1, 'TECH', 'TEXT', 180, '09:00:00', 1, 1),
       (2, 10, 'FLOW', 'VOICE', 120, '08:30:00', 1, 2),
       (3, 1, 'TECH', 'TEXT', 180, NULL, 1, 3),
       (4, 1, 'FLOW', 'VOICE', 90, '20:00:00', 0, 4),
       (5, 10, 'TECH', 'TEXT', 180, '07:30:00', 0, 6);

/* QUESTIONS (50) */
INSERT INTO questions (question_id, question_type, question_text, enabled)
VALUES (1, 'TECH', 'HTTP와 HTTPS의 차이와 TLS 핸드셰이크 과정을 설명하세요.', 1),
       (2, 'TECH', '데이터베이스 인덱스의 동작 원리와 주의할 점을 설명하세요.', 1),
       (3, 'INTRO', '자기소개를 해주세요.', 1),
       (4, 'MOTIVATION', '이 직무에 지원한 동기를 말씀해 주세요.', 1),
       (5, 'TECH', '프로세스와 스레드의 차이, 컨텍스트 스위칭 비용에 대해 설명하세요.', 1),
       (6, 'TECH', 'RESTful API 설계 원칙과 HTTP 상태코드 사용법을 설명하세요.', 1),
       (7, 'TECH', 'SQL의 JOIN 종류와 각각의 차이점을 예시와 함께 설명하세요.', 1),
       (8, 'TECH', 'Git의 merge와 rebase의 차이점과 언제 사용하는지 설명하세요.', 1),
       (9, 'INTRO', '본인의 강점과 약점을 각각 하나씩 말씀해 주세요.', 1),
       (10, 'MOTIVATION', '5년 후 어떤 개발자가 되고 싶은지 말씀해 주세요.', 1),
       (11, 'TECH', 'Docker와 가상머신의 차이점과 컨테이너화의 장점을 설명하세요.', 1),
       (12, 'TECH', 'MVC 패턴의 구조와 장단점을 설명하세요.', 1),
       (13, 'INTRO', '최근에 진행한 프로젝트에 대해 소개해 주세요.', 1),
       (14, 'MOTIVATION', '팀워크가 중요한 상황에서의 경험을 말씀해 주세요.', 1),
       (15, 'TECH', 'NoSQL과 RDBMS의 차이점과 각각의 사용 사례를 설명하세요.', 1),
       (16, 'TECH', 'Spring Framework의 IoC와 DI 개념을 설명하세요.', 1),
       (17, 'TECH', 'JavaScript의 호이스팅과 클로저에 대해 설명하세요.', 1),
       (18, 'TECH', 'TCP와 UDP의 차이점과 각각의 사용 사례를 설명하세요.', 1),
       (19, 'INTRO', '가장 기억에 남는 문제 해결 경험을 말씀해 주세요.', 1),
       (20, 'MOTIVATION', '개발자로서 가장 중요하게 생각하는 가치는 무엇인가요?', 1),
       (21, 'TECH', 'Redis와 같은 인메모리 캐시의 활용 사례와 장단점을 설명하세요.', 1),
       (22, 'TECH', 'CSS Flexbox와 Grid의 차이점과 사용 시나리오를 설명하세요.', 1),
       (23, 'TECH', '객체지향 프로그래밍의 4대 원칙을 설명하고 예시를 들어주세요.', 1),
       (24, 'INTRO', '본인만의 학습 방법이나 성장 전략이 있다면 말씀해 주세요.', 1),
       (25, 'MOTIVATION', '실패했던 프로젝트에서 배운 점이 있다면 말씀해 주세요.', 1),
       (26, 'TECH', 'JVM의 가비지 컬렉션 동작 원리를 설명하세요.', 1),
       (27, 'TECH', 'React의 Virtual DOM과 리렌더링 최적화 방법을 설명하세요.', 1),
       (28, 'TECH', 'SQL Injection 공격과 예방 방법을 설명하세요.', 1),
       (29, 'INTRO', '본인이 생각하는 좋은 코드의 조건은 무엇인가요?', 1),
       (30, 'MOTIVATION', '새로운 기술을 학습할 때 어떤 방식으로 접근하시나요?', 1),
       (31, 'TECH', 'Microservices Architecture의 장단점과 고려사항을 설명하세요.', 1),
       (32, 'TECH', 'Python의 GIL(Global Interpreter Lock)에 대해 설명하세요.', 1),
       (33, 'TECH', 'CI/CD 파이프라인의 구성 요소와 장점을 설명하세요.', 1),
       (34, 'INTRO', '코드 리뷰에 대한 본인의 생각과 경험을 말씀해 주세요.', 1),
       (35, 'MOTIVATION', '개발 외에 관심 있는 분야나 취미가 있다면 말씀해 주세요.', 1),
       (36, 'TECH', 'OAuth 2.0의 동작 원리와 보안 고려사항을 설명하세요.', 1),
       (37, 'TECH', 'GraphQL과 REST API의 차이점과 각각의 장단점을 설명하세요.', 1),
       (38, 'TECH', '데이터베이스 트랜잭션의 ACID 속성을 설명하세요.', 1),
       (39, 'INTRO', '동료들과 의견 충돌이 있을 때 어떻게 해결하시나요?', 1),
       (40, 'MOTIVATION', '현재 회사를 떠나려는 이유가 무엇인가요?', 1),
       (41, 'TECH', 'Kubernetes의 주요 개념과 컨테이너 오케스트레이션에 대해 설명하세요.', 1),
       (42, 'TECH', '함수형 프로그래밍의 특징과 장점을 설명하세요.', 1),
       (43, 'TECH', 'Load Balancing의 종류와 각각의 특징을 설명하세요.', 1),
       (44, 'INTRO', '업무에서 스트레스를 받을 때 어떻게 관리하시나요?', 1),
       (45, 'MOTIVATION', '10년 후 본인의 모습을 어떻게 그리고 계시나요?', 1),
       (46, 'TECH', 'Event-Driven Architecture의 개념과 장단점을 설명하세요.', 1),
       (47, 'TECH', 'TypeScript를 사용하는 이유와 JavaScript와의 차이점을 설명하세요.', 1),
       (48, 'TECH', 'Database Sharding과 Replication의 차이점과 사용 사례를 설명하세요.', 1),
       (49, 'INTRO', '본인이 리더 역할을 맡았던 경험이 있다면 말씀해 주세요.', 1),
       (50, 'MOTIVATION', '이 회사에서 이루고 싶은 목표나 기여하고 싶은 부분이 있나요?', 1);

/* QUESTION_JOBS (50개 질문에 대한 매핑) */
INSERT INTO question_jobs (question_id, job_id)
VALUES
-- Q1-Q5: 기존
(1, 1), (1, 2), (2, 3), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6),
(4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2),
-- Q6-Q10
(6, 1), (6, 2), (7, 1), (7, 3), (8, 1), (8, 2),
(9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6),
(10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6),
-- Q11-Q20
(11, 1), (11, 6), (12, 1), (12, 2), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6),
(14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (15, 1), (15, 3),
(16, 1), (17, 2), (18, 1), (18, 2), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6),
(20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6),
-- Q21-Q30
(21, 1), (21, 3), (22, 2), (22, 3), (23, 1), (23, 2), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6),
(25, 1), (25, 2), (25, 3), (25, 4), (25, 5), (25, 6), (26, 1), (27, 2), (28, 1), (28, 3),
(29, 1), (29, 2), (29, 3), (29, 4), (29, 5), (29, 6), (30, 1), (30, 2), (30, 3), (30, 4), (30, 5), (30, 6),
-- Q31-Q40
(31, 1), (31, 6), (32, 1), (32, 3), (33, 1), (33, 6), (34, 1), (34, 2), (34, 3), (34, 4), (34, 5), (34, 6),
(35, 1), (35, 2), (35, 3), (35, 4), (35, 5), (35, 6), (36, 1), (36, 2), (37, 1), (37, 2), (38, 1), (38, 3),
(39, 1), (39, 2), (39, 3), (39, 4), (39, 5), (39, 6), (40, 1), (40, 2), (40, 3), (40, 4), (40, 5), (40, 6),
-- Q41-Q50
(41, 1), (41, 6), (42, 1), (42, 2), (43, 1), (43, 6), (44, 1), (44, 2), (44, 3), (44, 4), (44, 5), (44, 6),
(45, 1), (45, 2), (45, 3), (45, 4), (45, 5), (45, 6), (46, 1), (46, 6), (47, 1), (47, 2), (48, 1), (48, 3),
(49, 1), (49, 2), (49, 3), (49, 4), (49, 5), (49, 6), (50, 1), (50, 2), (50, 3), (50, 4), (50, 5), (50, 6);

/* USER FLOW PROGRESS (5) */
INSERT INTO user_flow_progress (user_id, next_phase)
VALUES
    (1, 'MOTIVATION'),
    (2, 'TECH1'),
    (3, 'INTRO'),
    (4, 'TECH2'),
    (5, 'PERSONALITY');

/* ANSWERS (50) */
INSERT INTO answers (answer_id, user_id, question_id, answer_text, level, starred, created_at, memo)
VALUES
    (1, 1, 1, 'TLS는 대칭키 교환을 위해 비대칭키를 활용하며, 클라이언트와 서버가 서로의 인증서를 검증한 후 세션키를 생성합니다. HTTP는 평문 통신이지만 HTTPS는 암호화된 통신을 제공합니다.', 4, 0, '2025-09-01 09:12:00', '핸드셰이크 과정을 더 자세히'),
    (2, 2, 2, 'B+트리 구조를 사용하여 데이터 검색 속도를 향상시키는 자료구조입니다. 하지만 INSERT/UPDATE 시 인덱스 재정렬이 필요하므로 성능 저하가 발생할 수 있습니다.', 5, 1, '2025-09-02 08:45:00','클러스터드/넌클러스터드 구분 필요'),
    (3, 3, 3, '안녕하세요, 데이터 분석에 열정을 가진 김도현입니다. 3년간 금융 데이터 분석 경험이 있으며, 파이썬과 SQL을 활용한 데이터 처리에 능숙합니다.', 3, 0, '2025-09-03 21:10:00','구체적인 성과 언급 필요'),
    (4, 4, 4, '사용자 중심의 서비스 개발에 관심이 많습니다. 특히 UX/UI 개선을 통해 사용자 만족도를 높이고, A/B 테스트를 통한 데이터 기반 의사결정을 중요하게 생각합니다.', 4, 1, '2025-09-04 20:05:00', NULL),
    (5, 5, 5, '프로세스는 독립적인 메모리 공간을 가지며, 스레드는 메모리를 공유합니다. 컨텍스트 스위칭 시 CPU 캐시 미스와 TLB 미스로 인한 오버헤드가 발생합니다.', 4, 0, '2025-09-05 07:50:00', NULL),
    (6, 1, 6, 'REST API는 HTTP 메서드(GET, POST, PUT, DELETE)를 사용하고, 상태코드로 결과를 전달합니다. 200은 성공, 400은 클라이언트 오류, 500은 서버 오류를 의미합니다.', 3, 0, '2025-09-06 10:15:00', '리소스 URI 설계 원칙 추가'),
    (7, 2, 7, 'INNER JOIN은 양쪽 테이블에 모두 존재하는 데이터만, LEFT JOIN은 왼쪽 테이블의 모든 데이터와 매칭되는 오른쪽 데이터를 반환합니다. RIGHT JOIN과 FULL OUTER JOIN도 있습니다.', 4, 1, '2025-09-07 14:30:00', '실제 예시로 설명하면 더 좋을듯'),
    (8, 3, 8, 'merge는 브랜치를 합치면서 커밋 히스토리를 보존하고, rebase는 커밋을 재배치하여 선형적인 히스토리를 만듭니다. 협업 시에는 merge가, 깔끔한 히스토리가 필요할 때는 rebase를 사용합니다.', 5, 0, '2025-09-08 16:45:00', '실무에서 잘 활용중'),
    (9, 4, 9, '제 강점은 문제 해결 능력입니다. 복잡한 문제를 단계별로 분해해서 해결하는 것을 좋아합니다. 약점은 완벽주의 성향으로 때로는 과도하게 세부사항에 집착할 때가 있습니다.', 3, 1, '2025-09-09 11:20:00', '구체적인 사례 필요'),
    (10, 5, 10, '5년 후에는 풀스택 개발자로 성장하여 팀을 리드할 수 있는 시니어 개발자가 되고 싶습니다. 기술적 역량뿐만 아니라 비즈니스 관점에서도 사고할 수 있는 개발자가 목표입니다.', 4, 0, '2025-09-10 09:30:00', NULL),
    (11, 1, 11, 'Docker는 OS 레벨 가상화로 가볍고 빠르며, VM은 하드웨어 레벨 가상화로 완전한 격리를 제공합니다. 컨테이너는 일관된 환경 제공과 빠른 배포가 장점입니다.', 4, 1, '2025-09-11 13:40:00', 'Kubernetes 언급도 좋겠네'),
    (12, 2, 12, 'MVC는 Model, View, Controller로 구성되어 관심사 분리와 코드 재사용성을 높입니다. 하지만 Controller가 비대해질 수 있고, 복잡한 로직에서는 의존성이 커질 수 있습니다.', 4, 0, '2025-09-12 15:55:00', '다른 패턴과 비교하면 더 좋을듯'),
    (13, 3, 13, '최근 웹 크롤링 프로젝트를 진행했습니다. Python의 Scrapy를 사용해서 부동산 데이터를 수집하고, 데이터베이스에 저장한 후 시각화까지 구현했습니다.', 3, 0, '2025-09-13 12:10:00', '기술 스택과 성과 더 구체적으로'),
    (14, 4, 14, '이전 프로젝트에서 의견 충돌이 있었지만, 각자의 관점을 듣고 데이터를 기반으로 합리적인 결정을 내렸습니다. 결과적으로 팀 전체가 만족할 수 있는 솔루션을 찾았습니다.', 4, 1, '2025-09-14 17:25:00', '리더십 경험 어필 좋음'),
    (15, 5, 15, 'RDBMS는 ACID 특성을 보장하고 정규화된 구조를 가지며, NoSQL은 확장성과 유연성이 뛰어납니다. 금융 시스템은 RDBMS가, 빅데이터나 실시간 처리는 NoSQL이 적합합니다.', 5, 0, '2025-09-15 08:45:00', '구체적인 NoSQL 종류별 특징'),
    (16, 1, 16, 'IoC는 제어의 역전으로 객체의 생성과 생명주기를 스프링이 관리합니다. DI는 의존성 주입으로 객체 간의 결합도를 낮추고 테스트가 용이해집니다.', 4, 0, '2025-09-16 10:20:00', '@Autowired 예시 추가하면 좋을듯'),
    (17, 2, 17, '호이스팅은 변수나 함수 선언이 스코프 최상단으로 끌어올려지는 현상입니다. 클로저는 함수가 선언된 렉시컬 스코프를 기억하여 외부 변수에 접근할 수 있게 합니다.', 5, 1, '2025-09-17 11:30:00', 'var vs let/const 차이도 언급'),
    (18, 3, 18, 'TCP는 연결 지향적이고 신뢰성을 보장하며, UDP는 비연결 지향적이고 빠른 전송이 특징입니다. 웹은 TCP를, 게임이나 스트리밍은 UDP를 주로 사용합니다.', 4, 0, '2025-09-18 14:45:00', '3-way handshake 설명 추가'),
    (19, 4, 19, 'API 성능 이슈가 있었을 때, 프로파일링 도구로 병목 지점을 찾고 쿼리 최적화와 캐싱을 적용해서 응답 시간을 70% 단축시킨 경험이 있습니다.', 4, 1, '2025-09-19 09:15:00', '구체적인 수치와 과정 좋음'),
    (20, 5, 20, '사용자에게 가치를 전달하는 것이 가장 중요하다고 생각합니다. 기술적 완성도도 중요하지만, 결국 비즈니스 문제를 해결하고 사용자 경험을 개선하는 것이 핵심입니다.', 5, 0, '2025-09-20 16:00:00', '철학이 잘 드러남'),
    (21, 1, 21, 'Redis는 메모리 기반 키-값 저장소로 빠른 읽기/쓰기가 가능합니다. 세션 저장, 캐싱, 실시간 랭킹 등에 활용되지만 데이터 지속성과 메모리 용량 제한이 단점입니다.', 4, 1, '2025-09-21 12:25:00', 'Redis Cluster 언급도 좋겠네'),
    (22, 2, 22, 'Flexbox는 1차원 레이아웃으로 아이템 정렬에 강하고, Grid는 2차원 레이아웃으로 복잡한 레이아웃 구성에 적합합니다. 간단한 정렬은 Flexbox, 복잡한 레이아웃은 Grid를 사용합니다.', 4, 0, '2025-09-22 13:40:00', '실제 사용 사례 예시 추가'),
    (23, 3, 23, '캡슐화, 상속, 다형성, 추상화가 4대 원칙입니다. 캡슐화는 데이터 은닉, 상속은 코드 재사용, 다형성은 같은 인터페이스로 다른 동작, 추상화는 복잡성 숨기기입니다.', 3, 0, '2025-09-23 15:20:00', '각 원칙별 구체적 예시 필요'),
    (24, 4, 24, '공식 문서를 먼저 읽고, 작은 프로젝트를 통해 실습해봅니다. 온라인 강의와 커뮤니티 활동을 통해 다른 개발자들의 경험도 참고하며 지속적으로 학습합니다.', 4, 1, '2025-09-24 08:30:00', '학습 방법론이 체계적'),
    (25, 5, 25, '초기에 요구사항 분석이 부족해서 중간에 큰 변경이 있었습니다. 이후로는 프로젝트 시작 전 충분한 사전 조사와 이해관계자와의 소통을 중요하게 생각하게 되었습니다.', 4, 0, '2025-09-25 17:10:00', '실패에서 배운 교훈이 좋음'),
    (26, 1, 26, 'JVM은 힙 메모리의 가비지를 자동으로 수거합니다. Mark and Sweep 알고리즘으로 참조되지 않는 객체를 찾아 제거하며, G1GC, ZGC 등 다양한 GC 알고리즘이 있습니다.', 5, 1, '2025-09-26 11:50:00', 'GC 튜닝 경험도 언급하면 좋을듯'),
    (27, 2, 27, 'Virtual DOM은 실제 DOM의 가상 표현으로 메모리상에서 빠른 비교가 가능합니다. React.memo, useMemo, useCallback을 통한 메모이제이션으로 불필요한 리렌더링을 방지할 수 있습니다.', 5, 0, '2025-09-27 14:15:00', 'React 최적화 기법 잘 알고 있음'),
    (28, 3, 28, 'SQL Injection은 사용자 입력을 통해 악의적인 SQL을 실행하는 공격입니다. PreparedStatement 사용, 입력값 검증, ORM 사용 등으로 예방할 수 있습니다.', 4, 1, '2025-09-28 09:40:00', '구체적인 예시 코드 추가하면 더 좋음'),
    (29, 4, 29, '가독성이 좋고, 유지보수가 쉬우며, 확장 가능한 코드가 좋은 코드라고 생각합니다. SOLID 원칙을 지키고, 적절한 주석과 의미있는 변수명을 사용하는 것이 중요합니다.', 4, 0, '2025-09-29 16:25:00', '클린코드 원칙을 잘 이해함'),
    (30, 5, 30, '기본 개념을 이해한 후 공식 튜토리얼을 따라해보고, 작은 토이 프로젝트를 만들어봅니다. 그 후 실제 프로젝트에 적용하면서 깊이있게 학습합니다.', 4, 1, '2025-09-30 13:30:00', '단계적 학습 접근법이 좋음'),
    (31, 1, 31, '마이크로서비스는 서비스 독립성과 확장성이 장점이지만, 네트워크 복잡성과 분산 시스템의 어려움이 단점입니다. 조직 규모와 시스템 복잡도를 고려해야 합니다.', 4, 0, '2025-10-01 10:20:00', 'Conways Law 언급도 좋겠네'),
    (32, 2, 32, 'GIL은 파이썬에서 한 번에 하나의 스레드만 파이썬 바이트코드를 실행할 수 있게 하는 뮤텍스입니다. CPU 집약적 작업에서는 멀티프로세싱을 고려해야 합니다.', 5, 1, '2025-10-02 15:45:00', 'GIL 우회 방법까지 잘 알고 있음'),
    (33, 3, 33, 'CI/CD는 코드 통합, 빌드, 테스트, 배포를 자동화합니다. Jenkins, GitHub Actions 등의 도구로 구축하며, 빠른 피드백과 안정적인 배포가 장점입니다.', 4, 0, '2025-10-03 12:10:00', '실제 구축 경험 언급하면 더 좋음'),
    (34, 4, 34, '코드 리뷰는 코드 품질 향상과 지식 공유에 필수적입니다. 건설적인 피드백을 주고받으며, 비즈니스 로직과 성능까지 고려한 리뷰를 하려고 노력합니다.', 4, 1, '2025-10-04 14:50:00', '코드 리뷰 문화에 대한 이해가 좋음'),
    (35, 5, 35, '기술 블로그 작성과 오픈소스 기여를 즐깁니다. 새로운 언어나 프레임워크를 배우는 것도 취미이고, 운동을 통해 체력 관리도 하고 있습니다.', 3, 0, '2025-10-05 18:30:00', '개발 외 관심사도 균형있음'),
    (36, 1, 36, 'OAuth 2.0은 토큰 기반 인증 프로토콜입니다. Authorization Code, Implicit, Client Credentials 등의 플로우가 있으며, HTTPS 필수, 토큰 만료 등을 고려해야 합니다.', 5, 1, '2025-10-06 11:15:00', 'JWT와의 관계도 언급하면 완벽'),
    (37, 2, 37, 'GraphQL은 클라이언트가 필요한 데이터만 요청할 수 있어 효율적이고, 타입 시스템이 강력합니다. REST는 캐싱이 쉽고 표준화되어 있지만 Over/Under-fetching 문제가 있습니다.', 4, 0, '2025-10-07 09:25:00', 'N+1 문제 해결 방법도 언급하면 좋음'),
    (38, 3, 38, 'ACID는 원자성(Atomicity), 일관성(Consistency), 격리성(Isolation), 지속성(Durability)을 의미합니다. 트랜잭션이 안전하고 신뢰할 수 있게 처리되도록 보장하는 속성입니다.', 4, 1, '2025-10-08 16:40:00', '각 속성별 구체적 설명 좋음'),
    (39, 4, 39, '먼저 상대방의 의견을 충분히 들어보고, 데이터와 근거를 바탕으로 논의합니다. 감정이 아닌 논리로 접근하며, 필요시 제3자의 의견도 구합니다.', 4, 0, '2025-10-09 13:20:00', '갈등 해결 능력이 좋음'),
    (40, 5, 40, '현재 회사는 좋지만 더 큰 도전과 성장 기회를 찾고 있습니다. 새로운 기술 스택과 더 큰 규모의 프로젝트에서 경험을 쌓고 싶습니다.', 3, 1, '2025-10-10 10:05:00', '긍정적인 이직 동기'),
    (41, 1, 41, 'Kubernetes는 컨테이너 오케스트레이션 플랫폼으로 Pod, Service, Deployment 등의 객체로 구성됩니다. 자동 스케일링, 로드 밸런싱, 자가 치유 기능을 제공합니다.', 5, 0, '2025-10-11 14:30:00', 'K8s 실무 경험이 풍부해 보임'),
    (42, 2, 42, '함수형 프로그래밍은 순수 함수와 불변성을 중시합니다. 사이드 이펙트가 없어 예측 가능하고, 병렬 처리가 안전하며, 테스트와 디버깅이 쉽다는 장점이 있습니다.', 4, 1, '2025-10-12 12:15:00', 'FP 패러다임 이해도 좋음'),
    (43, 3, 43, 'L4는 IP와 포트 기반, L7은 HTTP 헤더나 쿠키 등 애플리케이션 계층 정보를 기반으로 합니다. Round Robin, Least Connection, IP Hash 등의 알고리즘이 있습니다.', 4, 0, '2025-10-13 15:50:00', '로드밸런싱 알고리즘까지 잘 알고 있음'),
    (44, 4, 44, '업무 우선순위를 정리하고 단계별로 해결해나갑니다. 동료들과의 소통을 통해 도움을 받기도 하고, 적절한 휴식을 취하면서 스트레스를 관리합니다.', 3, 1, '2025-10-14 11:35:00', '스트레스 관리 능력 좋음'),
    (45, 5, 45, '10년 후에는 기술과 비즈니스를 모두 이해하는 CTO나 테크 리더가 되고 싶습니다. 개발팀을 이끌면서 회사의 기술 전략을 수립하는 역할을 하고 싶습니다.', 5, 0, '2025-10-15 17:20:00', '장기적 비전이 명확함'),
    (46, 1, 46, '이벤트 드리븐 아키텍처는 이벤트 생성, 전달, 처리를 중심으로 구성됩니다. 느슨한 결합과 확장성이 장점이지만, 이벤트 순서와 중복 처리 등을 고려해야 합니다.', 4, 1, '2025-10-16 13:45:00', '이벤트 소싱 개념까지 언급하면 더 좋음'),
    (47, 2, 47, 'TypeScript는 정적 타입을 제공하여 컴파일 시점에 오류를 잡을 수 있고, IDE 지원이 뛰어납니다. 대규모 프로젝트에서 코드 안정성과 개발 생산성을 높입니다.', 5, 0, '2025-10-17 10:30:00', 'TS의 장점을 정확히 파악함'),
    (48, 3, 48, 'Sharding은 데이터를 여러 데이터베이스에 수평 분할하는 것이고, Replication은 동일한 데이터를 여러 서버에 복제하는 것입니다. 확장성과 가용성 목적이 다릅니다.', 4, 1, '2025-10-18 16:25:00', '분산 데이터베이스 개념 잘 이해함'),
    (49, 4, 49, '프로젝트 매니저 역할을 맡아 팀원들의 업무를 조율하고 일정을 관리했습니다. 정기 회의를 통해 진행 상황을 공유하고, 블로커가 있을 때 빠르게 해결책을 찾았습니다.', 4, 0, '2025-10-19 14:10:00', '리더십 경험이 구체적임'),
    (50, 5, 50, '이 회사의 기술 스택과 도전적인 프로젝트들에 기여하고 싶습니다. 특히 확장성 있는 시스템 설계와 성능 최적화 분야에서 전문성을 발휘하여 서비스 성장에 도움이 되고 싶습니다.', 5, 1, '2025-10-20 12:55:00', '구체적인 기여 방안 제시');

/* ANSWER FEEDBACKS (50) - JSON Format */
INSERT INTO feedbacks (feedback_id, answer_id, status, content, latency_ms, created_at)
VALUES
    (1, 1, 'DONE', '{"overallEvaluation": "TLS 핸드셰이크 과정을 정확하게 설명하셨습니다", "positivePoints": ["HTTP와 HTTPS의 차이점을 명확히 구분", "대칭키와 비대칭키 활용 방식 언급"], "pointsForImprovement": ["구체적인 핸드셰이크 단계별 설명 추가", "인증서 검증 과정의 세부사항 보완"]}', 820, '2025-09-01 09:13:00'),
    (2, 2, 'DONE', '{"overallEvaluation": "인덱스의 동작 원리를 잘 이해하고 계십니다", "positivePoints": ["B+트리 구조 언급이 정확함", "성능 trade-off에 대한 이해"], "pointsForImprovement": ["클러스터드/넌클러스터드 인덱스 구분 설명", "실제 사용 사례 예시 추가"]}', 1040, '2025-09-02 08:47:00'),
    (3, 3, 'DONE', '{"overallEvaluation": "경험을 바탕으로 한 자기소개가 좋습니다", "positivePoints": ["구체적인 경력과 기술 스택 언급", "데이터 분석에 대한 열정 표현"], "pointsForImprovement": ["구체적인 성과나 프로젝트 결과 언급", "향후 목표와 비전 추가"]}', 750, '2025-09-03 21:11:00'),
    (4, 4, 'DONE', '{"overallEvaluation": "사용자 중심적 사고가 잘 드러난 답변입니다", "positivePoints": ["UX/UI 개선에 대한 관심", "데이터 기반 의사결정 중시"], "pointsForImprovement": ["구체적인 A/B 테스트 경험 사례", "사용자 만족도 향상을 위한 구체적 방법론"]}', 680, '2025-09-04 20:06:00'),
    (5, 5, 'DONE', '{"overallEvaluation": "프로세스와 스레드의 차이를 정확히 설명하셨습니다", "positivePoints": ["메모리 공간 차이점 정확히 파악", "컨텍스트 스위칭 비용 요인 언급"], "pointsForImprovement": ["실제 운영체제별 구현 차이", "멀티스레딩 프로그래밍 주의사항 추가"]}', 900, '2025-09-05 07:52:00'),
    (6, 6, 'DONE', '{"overallEvaluation": "RESTful API 기본 개념은 잘 이해하고 계십니다", "positivePoints": ["HTTP 메서드별 용도 구분", "상태코드 분류 정확"], "pointsForImprovement": ["URI 설계 원칙 추가 설명", "HATEOAS 등 REST 제약사항 언급"]}', 720, '2025-09-06 10:16:00'),
    (7, 7, 'DONE', '{"overallEvaluation": "JOIN의 핵심 개념을 잘 파악하고 계십니다", "positivePoints": ["INNER JOIN과 LEFT JOIN 차이 명확", "다양한 JOIN 종류 언급"], "pointsForImprovement": ["실제 SQL 예제 코드 제시", "성능 고려사항과 인덱스 활용법"]}', 890, '2025-09-07 14:31:00'),
    (8, 8, 'DONE', '{"overallEvaluation": "Git의 핵심 기능을 정확히 이해하고 계십니다", "positivePoints": ["merge와 rebase의 차이점 명확", "협업 상황에서의 활용법 제시"], "pointsForImprovement": ["충돌 해결 방법", "브랜치 전략과 함께 설명하면 더 좋음"]}', 650, '2025-09-08 16:46:00'),
    (9, 9, 'DONE', '{"overallEvaluation": "자기 성찰이 잘 드러난 답변입니다", "positivePoints": ["강점을 구체적으로 표현", "약점을 솔직하게 인정"], "pointsForImprovement": ["구체적인 문제 해결 사례", "약점 개선을 위한 노력 언급"]}', 580, '2025-09-09 11:21:00'),
    (10, 10, 'DONE', '{"overallEvaluation": "명확한 커리어 비전을 가지고 계십니다", "positivePoints": ["구체적인 목표 직책 제시", "기술과 비즈니스 균형 고려"], "pointsForImprovement": ["목표 달성을 위한 구체적 계획", "리더십 역량 개발 방안"]}', 760, '2025-09-10 09:31:00'),
    (11, 11, 'DONE', '{"overallEvaluation": "컨테이너 기술의 핵심을 잘 이해하고 계십니다", "positivePoints": ["가상화 방식의 차이점 정확", "컨테이너의 장점 명확히 파악"], "pointsForImprovement": ["Docker 네트워킹과 볼륨", "실제 운영환경에서의 고려사항"]}', 820, '2025-09-11 13:41:00'),
    (12, 12, 'DONE', '{"overallEvaluation": "MVC 패턴에 대한 이해가 좋습니다", "positivePoints": ["관심사 분리의 장점 이해", "단점까지 고려한 균형잡힌 시각"], "pointsForImprovement": ["다른 아키텍처 패턴과의 비교", "실제 프레임워크에서의 구현 방식"]}', 710, '2025-09-12 15:56:00'),
    (13, 13, 'DONE', '{"overallEvaluation": "기술 스택을 활용한 프로젝트 경험이 좋습니다", "positivePoints": ["Python과 Scrapy 활용", "데이터 수집부터 시각화까지 전 과정"], "pointsForImprovement": ["프로젝트 규모와 성과 수치", "기술적 어려움과 해결 과정"]}', 640, '2025-09-13 12:11:00'),
    (14, 14, 'DONE', '{"overallEvaluation": "팀워크와 갈등 해결 능력이 우수합니다", "positivePoints": ["데이터 기반 의사결정 접근", "팀 전체의 만족을 고려"], "pointsForImprovement": ["구체적인 갈등 상황과 해결 과정", "리더십 발휘 사례"]}', 590, '2025-09-14 17:26:00'),
    (15, 15, 'DONE', '{"overallEvaluation": "데이터베이스 종류별 특성을 잘 파악하고 계십니다", "positivePoints": ["ACID와 확장성 trade-off 이해", "사용 사례별 적합성 구분"], "pointsForImprovement": ["구체적인 NoSQL 종류별 특징", "CAP 정리와 연결한 설명"]}', 880, '2025-09-15 08:46:00'),
    (16, 16, 'DONE', '{"overallEvaluation": "Spring의 핵심 개념을 정확히 이해하고 계십니다", "positivePoints": ["IoC와 DI의 차이점 명확", "테스트 용이성 언급"], "pointsForImprovement": ["실제 애노테이션 사용 예시", "Spring Boot와의 차이점"]}', 750, '2025-09-16 10:21:00'),
    (17, 17, 'DONE', '{"overallEvaluation": "JavaScript의 고급 개념을 잘 이해하고 계십니다", "positivePoints": ["호이스팅 메커니즘 정확히 파악", "클로저의 렉시컬 스코프 이해"], "pointsForImprovement": ["var, let, const의 호이스팅 차이", "클로저 활용 실제 사례"]}', 690, '2025-09-17 11:31:00'),
    (18, 18, 'DONE', '{"overallEvaluation": "네트워크 프로토콜의 특성을 정확히 구분하고 계십니다", "positivePoints": ["연결 지향성과 신뢰성 차이 파악", "적절한 사용 사례 제시"], "pointsForImprovement": ["3-way handshake 과정", "패킷 손실 처리 메커니즘"]}', 800, '2025-09-18 14:46:00'),
    (19, 19, 'DONE', '{"overallEvaluation": "체계적인 문제 해결 과정이 인상적입니다", "positivePoints": ["프로파일링을 통한 정확한 원인 파악", "70% 성능 개선이라는 구체적 성과"], "pointsForImprovement": ["사용한 프로파일링 도구 명시", "캐싱 전략의 구체적 내용"]}', 620, '2025-09-19 09:16:00'),
    (20, 20, 'DONE', '{"overallEvaluation": "개발자로서의 철학이 명확하게 드러납니다", "positivePoints": ["사용자 가치 중심의 사고", "기술과 비즈니스 균형 고려"], "pointsForImprovement": ["구체적인 가치 전달 사례", "기술 부채와 비즈니스 요구 사이의 균형"]}', 540, '2025-09-20 16:01:00'),
    (21, 21, 'DONE', '{"overallEvaluation": "Redis의 특성과 활용법을 잘 알고 계십니다", "positivePoints": ["메모리 기반의 성능 특성 이해", "다양한 활용 사례 제시"], "pointsForImprovement": ["데이터 지속성 보장 방법", "Redis Cluster나 Sentinel 구성"]}', 780, '2025-09-21 12:26:00'),
    (22, 22, 'DONE', '{"overallEvaluation": "CSS 레이아웃 기술의 차이를 정확히 파악하고 계십니다", "positivePoints": ["1차원 vs 2차원 레이아웃 구분", "적절한 사용 시나리오 제시"], "pointsForImprovement": ["실제 코드 예시", "브라우저 호환성 고려사항"]}', 660, '2025-09-22 13:41:00'),
    (23, 23, 'DONE', '{"overallEvaluation": "객체지향의 기본 원칙을 이해하고 계십니다", "positivePoints": ["4대 원칙을 모두 정확히 나열", "각 원칙의 목적 파악"], "pointsForImprovement": ["실제 코드로 구현한 예시", "SOLID 원칙과의 연관성"]}', 720, '2025-09-23 15:21:00'),
    (24, 24, 'DONE', '{"overallEvaluation": "체계적이고 실용적인 학습 방법을 가지고 계십니다", "positivePoints": ["공식 문서부터 시작하는 접근", "실습과 커뮤니티 활용"], "pointsForImprovement": ["학습 효과 측정 방법", "새 기술 도입 시 팀 설득 과정"]}', 580, '2025-09-24 08:31:00'),
    (25, 25, 'DONE', '{"overallEvaluation": "실패에서 배우는 자세가 훌륭합니다", "positivePoints": ["솔직한 실패 인정", "구체적인 교훈과 개선점 도출"], "pointsForImprovement": ["요구사항 분석 개선 방법론", "이해관계자 소통 기법"]}', 640, '2025-09-25 17:11:00'),
    (26, 26, 'DONE', '{"overallEvaluation": "JVM 가비지 컬렉션에 대한 깊은 이해를 보여주십니다", "positivePoints": ["Mark and Sweep 알고리즘 언급", "다양한 GC 종류 파악"], "pointsForImprovement": ["각 GC별 사용 시나리오", "GC 튜닝 실제 경험"]}', 850, '2025-09-26 11:51:00'),
    (27, 27, 'DONE', '{"overallEvaluation": "React 최적화에 대한 전문적 지식이 우수합니다", "positivePoints": ["Virtual DOM 동작 원리 정확", "다양한 메모이제이션 기법 활용"], "pointsForImprovement": ["컴포넌트 설계 원칙", "성능 측정 도구 활용"]}', 730, '2025-09-27 14:16:00'),
    (28, 28, 'DONE', '{"overallEvaluation": "보안 취약점과 대응 방안을 잘 이해하고 계십니다", "positivePoints": ["SQL Injection 공격 원리 파악", "다양한 예방 방법 제시"], "pointsForImprovement": ["구체적인 코드 예시", "다른 보안 취약점과의 연관성"]}', 670, '2025-09-28 09:41:00'),
    (29, 29, 'DONE', '{"overallEvaluation": "코드 품질에 대한 철학이 명확합니다", "positivePoints": ["가독성, 유지보수성 중시", "SOLID 원칙 언급"], "pointsForImprovement": ["구체적인 코드 리뷰 사례", "레거시 코드 개선 경험"]}', 590, '2025-09-29 16:26:00'),
    (30, 30, 'DONE', '{"overallEvaluation": "단계적이고 실용적인 학습 접근법이 좋습니다", "positivePoints": ["기본 개념부터 실제 적용까지", "체계적인 학습 프로세스"], "pointsForImprovement": ["학습 목표 설정 방법", "기술 트렌드 파악 방식"]}', 610, '2025-09-30 13:31:00'),
    (31, 31, 'DONE', '{"overallEvaluation": "마이크로서비스의 장단점을 균형있게 이해하고 계십니다", "positivePoints": ["독립성과 확장성 장점 파악", "복잡성 증가 단점 고려"], "pointsForImprovement": ["서비스 분리 기준", "분산 시스템 모니터링 방안"]}', 760, '2025-10-01 10:21:00'),
    (32, 32, 'DONE', '{"overallEvaluation": "Python GIL의 본질을 정확히 이해하고 계십니다", "positivePoints": ["뮤텍스의 역할 정확히 파악", "멀티프로세싱 대안 제시"], "pointsForImprovement": ["GIL 우회 방법들", "비동기 프로그래밍과의 차이"]}', 820, '2025-10-02 15:46:00'),
    (33, 33, 'DONE', '{"overallEvaluation": "CI/CD의 핵심 가치를 잘 이해하고 계십니다", "positivePoints": ["자동화의 장점 명확히 파악", "대표적인 도구들 언급"], "pointsForImprovement": ["파이프라인 설계 원칙", "배포 전략 종류"]}', 700, '2025-10-03 12:11:00'),
    (34, 34, 'DONE', '{"overallEvaluation": "코드 리뷰 문화에 대한 깊은 이해가 있습니다", "positivePoints": ["품질 향상과 지식 공유 목적 파악", "포괄적인 리뷰 관점"], "pointsForImprovement": ["효과적인 피드백 전달 방법", "리뷰 도구 활용 경험"]}', 650, '2025-10-04 14:51:00'),
    (35, 35, 'DONE', '{"overallEvaluation": "개발과 삶의 균형을 잘 유지하고 계십니다", "positivePoints": ["기술 블로그와 오픈소스 활동", "지속적인 학습 의지"], "pointsForImprovement": ["시간 관리 방법", "업무와 개인 성장의 시너지"]}', 520, '2025-10-05 18:31:00'),
    (36, 36, 'DONE', '{"overallEvaluation": "OAuth 2.0 프로토콜을 상세히 알고 계십니다", "positivePoints": ["다양한 플로우 종류 파악", "보안 고려사항 언급"], "pointsForImprovement": ["JWT와의 관계", "실제 구현 시 주의점"]}', 790, '2025-10-06 11:16:00'),
    (37, 37, 'DONE', '{"overallEvaluation": "GraphQL과 REST의 특성을 정확히 비교하고 계십니다", "positivePoints": ["데이터 fetching 효율성 이해", "각각의 장단점 균형있게 평가"], "pointsForImprovement": ["N+1 문제 해결 방안", "캐싱 전략 차이"]}', 680, '2025-10-07 09:26:00'),
    (38, 38, 'DONE', '{"overallEvaluation": "데이터베이스 트랜잭션의 핵심을 정확히 파악하고 계십니다", "positivePoints": ["ACID 각 속성의 의미 정확", "트랜잭션의 목적 이해"], "pointsForImprovement": ["격리 수준별 차이", "데드락 방지 방법"]}', 740, '2025-10-08 16:41:00'),
    (39, 39, 'DONE', '{"overallEvaluation": "성숙한 갈등 해결 능력을 보여주십니다", "positivePoints": ["경청과 논리적 접근", "객관적 판단 기준"], "pointsForImprovement": ["갈등 예방 방법", "팀 문화 개선 경험"]}', 580, '2025-10-09 13:21:00'),
    (40, 40, 'DONE', '{"overallEvaluation": "긍정적이고 발전적인 이직 동기입니다", "positivePoints": ["성장 기회 추구", "새로운 도전 의지"], "pointsForImprovement": ["구체적인 기술 스택 관심사", "장기적 커리어 연계성"]}', 560, '2025-10-10 10:06:00'),
    (41, 41, 'DONE', '{"overallEvaluation": "Kubernetes의 핵심 개념을 잘 파악하고 계십니다", "positivePoints": ["주요 객체들 정확히 나열", "오케스트레이션 기능 이해"], "pointsForImprovement": ["네트워킹과 스토리지 관리", "운영 환경에서의 모니터링"]}', 860, '2025-10-11 14:31:00'),
    (42, 42, 'DONE', '{"overallEvaluation": "함수형 프로그래밍의 핵심 가치를 이해하고 계십니다", "positivePoints": ["순수 함수와 불변성 중요성 파악", "병렬 처리와 테스트 용이성 언급"], "pointsForImprovement": ["함수 합성과 고차 함수", "실제 언어에서의 활용 사례"]}', 720, '2025-10-12 12:16:00'),
    (43, 43, 'DONE', '{"overallEvaluation": "로드 밸런싱 기술을 전문적으로 이해하고 계십니다", "positivePoints": ["L4와 L7의 차이점 명확", "다양한 알고리즘 언급"], "pointsForImprovement": ["Health Check 메커니즘", "세션 유지 방법"]}', 780, '2025-10-13 15:51:00'),
    (44, 44, 'DONE', '{"overallEvaluation": "건강한 스트레스 관리 방법을 가지고 계십니다", "positivePoints": ["체계적인 업무 우선순위 관리", "팀워크와 휴식의 균형"], "pointsForImprovement": ["스트레스 예방 방법", "번아웃 대처 경험"]}', 500, '2025-10-14 11:36:00'),
    (45, 45, 'DONE', '{"overallEvaluation": "명확하고 현실적인 장기 비전을 가지고 계십니다", "positivePoints": ["기술과 비즈니스 리더십 균형", "구체적인 목표 직책 제시"], "pointsForImprovement": ["리더십 역량 개발 계획", "조직 문화 구축 철학"]}', 690, '2025-10-15 17:21:00'),
    (46, 46, 'DONE', '{"overallEvaluation": "이벤트 드리븐 아키텍처의 특성을 잘 파악하고 계십니다", "positivePoints": ["느슨한 결합과 확장성 이해", "이벤트 처리 고려사항 언급"], "pointsForImprovement": ["이벤트 스토어 설계", "사가 패턴 등 구현 방식"]}', 770, '2025-10-16 13:46:00'),
    (47, 47, 'DONE', '{"overallEvaluation": "TypeScript의 핵심 가치를 정확히 이해하고 계십니다", "positivePoints": ["정적 타입의 장점 명확히 파악", "개발 생산성 향상 효과 인지"], "pointsForImprovement": ["고급 타입 시스템 활용", "마이그레이션 전략"]}', 620, '2025-10-17 10:31:00'),
    (48, 48, 'DONE', '{"overallEvaluation": "분산 데이터베이스 기술을 전문적으로 이해하고 계십니다", "positivePoints": ["Sharding과 Replication 목적 구분", "확장성과 가용성 trade-off 이해"], "pointsForImprovement": ["데이터 일관성 보장 방법", "파티셔닝 전략"]}', 810, '2025-10-18 16:26:00'),
    (49, 49, 'DONE', '{"overallEvaluation": "실질적인 리더십 경험이 잘 드러납니다", "positivePoints": ["구체적인 업무 조율 경험", "문제 해결 중심의 접근"], "pointsForImprovement": ["팀원 동기 부여 방법", "갈등 상황 리더십"]}', 640, '2025-10-19 14:11:00'),
    (50, 50, 'DONE', '{"overallEvaluation": "회사에 대한 구체적인 기여 방안을 제시하고 계십니다", "positivePoints": ["확장성과 성능 최적화 전문성", "서비스 성장에 대한 의지"], "pointsForImprovement": ["회사 비즈니스 모델 이해도", "팀 문화 기여 방안"]}', 750, '2025-10-20 12:56:00');

/* RIVALS (5) */
INSERT INTO rivals (rival_id, sender_id, receiver_id, status)
VALUES
    (1, 1, 2, 'ACCEPTED'),  -- Alice -> Bob (수락됨)
    (2, 2, 1, 'ACCEPTED'),  -- Bob -> Alice (수락됨, 서로 라이벌)
    (3, 3, 1, 'WAITING'),   -- Carol -> Alice (대기 중)
    (4, 4, 2, 'REJECTED'),  -- Dave -> Bob (거절됨)
    (5, 5, 3, 'WAITING');   -- Erin -> Carol (대기 중)

